# -*- coding: utf-8 -*-
"""Batch_1_ANN (2).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kCozrgpQtvUbf2wdZRSZ1ZnM55cVXbrh

# Regression
"""

# Importing the required libraries

import numpy as np
import pandas as pd 
import matplotlib.pyplot as plt
import seaborn as sns

"""***2.Load the Dataset***"""

# Reading the dataset

df = pd.read_csv('/content/Churn_Modelling.csv')

"""***3.Perform Below Visualizations***

*Univariate Analysis*
"""

# Visualize the data

df.head()

df_France=df.loc[df['Geography']=='France']
df_Spain=df.loc[df['Geography']=='Spain']
df_Germany=df.loc[df['Geography']=='Germany']
plt.plot(df_France['Tenure'],np.zeros_like(df_France['Tenure']),'o')
plt.plot(df_Spain['Tenure'],np.zeros_like(df_Spain['Tenure']),'o')
plt.plot(df_Germany['Tenure'],np.zeros_like(df_Germany['Tenure']),'o')
plt.xlabel('NumofProducts')
plt.show()

"""*Bivariate Analysis*"""

sns.FacetGrid(df,hue="Geography",size=5).map(plt.scatter,"Balance","EstimatedSalary").add_legend()
plt.show()

"""*Multivariate Analysis*"""

sns.pairplot(df, hue="Geography", height=2)

"""***4.Perform descriptive statistics on the dataset.***"""

df.shape

df.info()

df.describe()

"""***5. Handle the Missing values.***"""

missing_values=df.isnull().sum()
missing_values[missing_values>0]/len(df)*100

sns.heatmap(df.isnull(),yticklabels=False,cbar=False)

sns.heatmap(df.isnull(),yticklabels=True,cbar=True)

sns.heatmap(df.isnull(),yticklabels=True,cbar=False)

# Checking null values

df.isnull().sum()

df.notnull().sum()

bool_series = pd.isnull(df["Balance"]) 

# filtering data
# displaying data only with Gender = Not NaN
df[bool_series]

bool_series = pd.notnull(df["Balance"]) 


df[bool_series]

df["Gender"].fillna("No Gender", inplace = False) 

df

df[10:25]

#Checking Duplicate 
df = df.drop_duplicates(subset ="Age",)
df

df.value_counts("Gender")

"""***6. Find the outliers and replace the outliers***"""

#Boxplot
sns.boxplot(df['Tenure'],data=df)

#Histogram
df['Tenure'].hist()

#Skewness
print('skewness value of Age: ',df['Age'].skew())
print('skewness value of Fare: ',df['Tenure'].skew())

#Standard Deviation
fare_mean = df['Tenure'].mean()
fare_std = df['Tenure'].std()
low= fare_mean -(3 * fare_std)
high= fare_mean + (3 * fare_std)
fare_outliers = df[(df['Tenure'] < low) | (df['Tenure'] > high)]
fare_outliers.head()

#Flooring And Capping
Q1 = df['Tenure'].quantile(0.25)
Q3 = df['Tenure'].quantile(0.75)
IQR = Q3 - Q1
whisker_width = 1.5
lower_whisker = Q1 -(whisker_width*IQR)
upper_whisker = Q3 + (whisker_width*IQR)
df['Tenure']=np.where(df['Tenure']>upper_whisker,upper_whisker,np.where(df['Tenure']<lower_whisker,lower_whisker,df['Tenure']))

"""***7. Check for Categorical columns and perform encoding.***"""

df_numeric = df[['RowNumber',	'CustomerId','CreditScore', 'Age',	'Tenure',	'Balance',	'NumOfProducts',	'HasCrCard',	'IsActiveMember',	'EstimatedSalary',	'Exited']]
df_categorical = df[['Surname', 'Geography',	'Gender']]

df_numeric.head()

df_categorical.head()

print(df['Gender'].unique())
print(df['Geography'].unique())
print(df['Surname'].unique())

from sklearn.preprocessing import OneHotEncoder
import numpy as np

gender_encoder = OneHotEncoder()
gender_reshaped = np.array(df_categorical['Gender']).reshape(-1, 1)
gender_values = gender_encoder.fit_transform(gender_reshaped)

print(df_categorical['Gender'][:5])
print()
print(gender_values.toarray()[:5])
print()
print(gender_encoder.inverse_transform(gender_values)[:5])

"""***8. Split the data into dependent and independent variables***"""

#Splitting the Dataset into the Independent Feature Matrix
X = df.iloc[:, :-1].values
print(X)

Y = df.iloc[:, -1].values
print(Y)

# Split the data (Independent and dependent)

x = df.drop('Geography',axis=1)
y = df['Geography']
print(x)
print(y)

"""***10. Split the data into training and testing***"""

# Split the data (Training & testing)
from sklearn.model_selection import train_test_split
xtrain,xtest,ytrain,ytest = train_test_split(x,y,test_size=0.2,random_state=0)

xtrain.shape

ytrain.shape

xtest

ytest

xtrain

ytrain